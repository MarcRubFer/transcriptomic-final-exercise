contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_DPN_lfc1)
res@rownames
res2@rownames
mat <- assay(vsd)[head(order(res$padj), 30), ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
mat <- assay(vsd)[head(order(res2$padj), 30), ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
mat <- assay(vsd)[head(order(res$padj), 30), ]
mat <- mat - rowMeans(mat)
anno <- as.data.frame(colData(vsd)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
order(res$padj)
head(order(res$padj), 30)
res$padj
order(res$padj)
res$padj[658]
pheatmap(mat, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
pheatmap(mat, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
resultsNames(dds3)
res_OHT <- results(object = dds3,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
summary(res_OHT)
res_OHT_lfc1 <- results(object = dds3,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_OHT_lfc1)
res_OHT_lfc1@rownames
res_OHT_lfc1
res_OHT_lfc1$padj < 0.05
which(res_OHT_lfc1$padj < 0.05)
res_OHT_lfc1@rownames[21753]
res_OHT_lfc1@rownames[which(res_OHT_lfc1$padj < 0.05)]
gene <- res_OHT_lfc1@rownames[which(res_OHT_lfc1$padj < 0.05)]
plotCounts(dds3, gene = gene)
plotCounts(dds3, gene = gene, intgroup = "group")
plotCounts(dds3, gene = gene, intgroup = c("group", "patient"))
data <- plotCounts(dds3, gene = gene, intgroup = c("group", "patient"))
data <- plotCounts(dds3, gene = gene, intgroup = c("group", "patient"))
ggplot(data, aes(x="group", y=count, color="patient")) +
geom_jitter(size=3) +
scale_y_log10()
ggplot(data, aes(x=group, y=count)) +
geom_jitter(size=3) +
scale_y_log10()
data <- plotCounts(dds3, gene = gene, intgroup = c("group", "patient"), returnData = TRUE)
ggplot(data, aes(x=group, y=count)) +
geom_jitter(size=3) +
scale_y_log10()
ggplot(data, aes(x=group, y=count, color = patient)) +
geom_jitter(size=3) +
scale_y_log10()
data <- plotCounts(dds3, gene = gene, intgroup = c("agent", "patient"), returnData = TRUE)
ggplot(data, aes(x=group, y=count, color = patient)) +
geom_jitter(size=3) +
scale_y_log10()
ggplot(data, aes(x=agent, y=count, color = patient)) +
geom_jitter(size=3) +
scale_y_log10()
ggplot(data, aes(x=agent, y=count, color = patient, shape = time)) +
geom_jitter(size=3) +
scale_y_log10()
data <- plotCounts(dds3, gene = gene, intgroup = c("agent", "patient", "time"), returnData = TRUE)
ggplot(data, aes(x=agent, y=count, color = patient, shape = time)) +
geom_jitter(size=3) +
scale_y_log10()
plotCounts(dds3, gene = gene, intgroup = c("agent", "patient", "time"), returnData = TRUE)
ggplot(data, aes(x=agent, y=count, color = patient, shape = time)) +
geom_jitter(size=3) +
scale_y_log10()
data <- plotCounts(dds3, gene = gene, intgroup = c("agent", "time"), returnData = TRUE)
ggplot(data, aes(x=agent, y=count, color = patient, shape = time)) +
geom_jitter(size=3) +
scale_y_log10()
ggplot(data, aes(x=agent, y=count, color = time, shape = time)) +
geom_jitter(size=3) +
scale_y_log10()
plotCounts(dds3, gene = gene, intgroup = c("agent", "time"))
plotCounts(dds3, gene = gene, intgroup = "group")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"))
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "o")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "b")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "l")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "c")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "s")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "p")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "p", col = "patient")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "p", col = "red")
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "p", col = c("red", "blue"))
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "p", col = c("red", "blue", "green"))
plotCounts(dds3, gene = gene, intgroup = c("group","patient"), type = "p", col = c("red", "blue", "green", "black"))
?plotCounts
plotCounts(dds3, gene = gene, intgroup = c("agent"), type = "p")
data <- plotCounts(dds3, gene = gene, intgroup = c("agent"), type = "p", returnData = T)
ggplot(data, aes(x=agent, y=count, color = patient)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
data <- plotCounts(dds3, gene = gene, intgroup = c("agent", "patient"), type = "p", returnData = T)
ggplot(data, aes(x=agent, y=count, color = patient)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
plotCounts(dds3, gene = gene, intgroup = c("agent", "patient"), type = "p", returnData = T)
#if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#BiocManager::install("vsn")
library("DESeq2")
library("tidyverse")
library("pheatmap")
library("RColorBrewer")
library("vsn")
counts_data <- read.csv(file = "./input/rawcounts.tsv", sep = "\t", row.names = 1)
colnames(counts_data)
experiment_data <- read.csv(file = "./input/metadata.tsv", sep = "\t")
rownames(experiment_data) <- colnames(counts_data)
experiment_data <- mutate(.data=experiment_data,
X=NULL,
patient = as.factor(patient),
agent = as.factor(agent),
time = as.factor(time))
all(colnames(counts_data) %in% rownames(experiment_data))
all(colnames(counts_data) == rownames(experiment_data))
experiment_data$group <- as.factor(paste0(experiment_data$agent, experiment_data$time))
experiment_data$group
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = experiment_data,
design = ~ patient + group)
dds
keep <- rowSums(counts(dds)) >= 10
dds2 <- dds[keep, ]
paste("El número de genes incialmente es:", dim(dds)[1])
paste("El número de genes tras filtrar aquellos con un número de lecturas > 10 es:", dim(dds2)[1])
vsd <- vst(dds2, blind = TRUE)
ntd <- normTransform(dds2)
eSF <- estimateSizeFactors(dds2)
df <- bind_rows(
as_data_frame(log2(counts(eSF, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
lvls <- c("log2(x + 1)", "vst")
df$transformation <- factor(df$transformation, levels=lvls)
plot1 <- ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
par(mfrow = c(2,2))
norm_graph <- meanSdPlot(assay(ntd))
vsd_graph <- meanSdPlot(assay(vsd))
plot1
plotPCA(vsd, intgroup = "patient")
plotPCA(vsd, intgroup = "group")
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "time")
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$patient, vsd$group, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
dds3 <- DESeq(dds2, test = "Wald")
plotDispEsts(dds3)
plotMA(dds3)
res_DPN_lfc1 <- results(object = dds3,
contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_DPN_lfc1)
res_OHT <- results(object = dds3,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
summary(res_OHT)
res_OHT_lfc1 <- results(object = dds3,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_OHT_lfc1)
gene <- res_OHT_lfc1@rownames[which(res_OHT_lfc1$padj < 0.05)]
plotCounts(dds3, gene = gene, intgroup = c("agent", "patient"), type = "p", returnData = T)
plotCounts(dds3, gene = gene, intgroup = c("agent", "patient"), type = "p"
data <- plotCounts(dds3, gene = gene, intgroup = c("agent", "patient","time"), type = "p", returnData = T)
data <- plotCounts(dds3, gene = gene, intgroup = c("agent", "patient","time"), type = "p", returnData = T)
data
ggplot(data, aes(x=agent, y=count, color = patient, shape=time)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
ggplot(data, aes(x=agent, y=count, color = patient, shape=time)) +
geom_bar()
ggplot(data, aes(x=agent, y=count, color = patient, shape=time)) +
geom_point()
paste("El gen con logfold = 2 es:", gene)
paste("El gen que sale significativo es:", gene)
experiment_data
res$padj
mat <- assay(vsd)[head(order(res_DPN$padj), 30), ]
mat <- mat - rowMeans(mat)
mat_DPN <- assay(vsd)[head(order(res_DPN$padj), 30), ]
#if (!require("BiocManager", quietly = TRUE))
#   install.packages("BiocManager")
#BiocManager::install("vsn")
library("DESeq2")
library("tidyverse")
library("pheatmap")
library("RColorBrewer")
library("vsn")
counts_data <- read.csv(file = "./input/rawcounts.tsv", sep = "\t", row.names = 1)
colnames(counts_data)
experiment_data <- read.csv(file = "./input/metadata.tsv", sep = "\t")
rownames(experiment_data) <- colnames(counts_data)
experiment_data <- mutate(.data=experiment_data,
X=NULL,
patient = as.factor(patient),
agent = as.factor(agent),
time = as.factor(time))
all(colnames(counts_data) %in% rownames(experiment_data))
all(colnames(counts_data) == rownames(experiment_data))
experiment_data$group <- as.factor(paste0(experiment_data$agent, experiment_data$time))
experiment_data$group
dds <- DESeqDataSetFromMatrix(countData = counts_data,
colData = experiment_data,
design = ~ patient + group)
dds
keep <- rowSums(counts(dds)) >= 10
dds2 <- dds[keep, ]
paste("El número de genes incialmente es:", dim(dds)[1])
paste("El número de genes tras filtrar aquellos con un número de lecturas > 10 es:", dim(dds2)[1])
vsd <- vst(dds2, blind = TRUE)
ntd <- normTransform(dds2)
eSF <- estimateSizeFactors(dds2)
df <- bind_rows(
as_data_frame(log2(counts(eSF, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df)[1:2] <- c("x", "y")
lvls <- c("log2(x + 1)", "vst")
df$transformation <- factor(df$transformation, levels=lvls)
plot1 <- ggplot(df, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
par(mfrow = c(2,2))
norm_graph <- meanSdPlot(assay(ntd))
vsd_graph <- meanSdPlot(assay(vsd))
plot1
plotPCA(vsd, intgroup = "patient")
plotPCA(vsd, intgroup = "group")
plotPCA(vsd, intgroup = "agent")
plotPCA(vsd, intgroup = "time")
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix( sampleDists )
rownames(sampleDistMatrix) <- paste( vsd$patient, vsd$group, sep = " - " )
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows = sampleDists,
clustering_distance_cols = sampleDists,
col = colors)
dds3 <- DESeq(dds2, test = "Wald")
plotDispEsts(dds3)
plotMA(dds3)
res_DPN_lfc1 <- results(object = dds3,
contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_DPN_lfc1)
mat_DPN <- assay(vsd)[head(order(res_DPN$padj), 30), ]
res_DPN <- results(object = dds3,
contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
res_DPN$padj
mat_DPN <- assay(vsd)[head(order(res_DPN$padj), 30), ]
mat <- mat - rowMeans(mat)
mat_DPN <- mat_DPN - rowMeans(mat_DPN)
anno <- as.data.frame(colData(vsd)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat = mat_DPN, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
mat_OHT <- assay(vsd)[head(order(res_OHT$padj), 30), ]
res_OHT <- results(object = dds3,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
summary(res_OHT)
res_OHT_lfc1 <- results(object = dds3,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_OHT_lfc1)
gene <- res_OHT_lfc1@rownames[which(res_OHT_lfc1$padj < 0.05)]
paste("El gen que sale significativo es:", gene)
mat_OHT <- assay(vsd)[head(order(res_OHT$padj), 30), ]
mat_OHT <- mat_OHT - rowMeans(mat_OHT)
anno <- as.data.frame(colData(vsd)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat = mat_OHT, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
View(experiment_data)
which(experiment_data_2 == "GSM913873")
which(experiment_data == "GSM913873")
which(experiment_data$patient == 3)
which(experiment_data$patient == 3 && experiment_data_2$agent == "Control")
which(experiment_data$patient == 3)
which(experiment_data$agent == "Control")
which(experiment_data$time == "24h")
which(experiment_data$patient == 4)
which(experiment_data$agent == "Control")
which(experiment_data$time == "24h")
patient_outlier <- which(experiment_data$patient == 4)
agent_outlier <- which(experiment_data$agent == "Control")
time_outliert <- which(experiment_data$time == "24h")
which(patient_outlier %in% agent_outlier)
which(patient_outlier %in% agent_outlier %in% time_outliert)
which(patient_outlier == agent_outlier)
rownames(experiment_data)
intersect(patient_outlier,agent_outlier)
intersect(patient_outlier,agent_outlier,time_outliert)
intersect(patient_outlier,agent_outlier)
intersect(patient_outlier,time_outliert)
patient_outlier %in% time_outliert
intersect(patient_outlier,time_outliert)
pat_agent <- intersect(patient_outlier,agent_outlier)
pat_time <- intersect(patient_outlier,time_outliert)
intersect(pat_agent,pat_time)
index_outlier <- intersect(pat_agent,pat_time)
experiment_data_2 <- experiment_data[-index_outlier,]
counts_data_2[ ,24]
counts_data[ ,24]
counts_data_2 <- counts_data[ ,-24]
View(experiment_data_2)
dds_outlier <- DESeqDataSetFromMatrix(countData = counts_data_2,
colData = experiment_data_2,
design = ~ patient + group)
dds_outlier
keep <- rowSums(counts(dds)) >= 10
dds2_outlier <- dds_outlier[keep, ]
paste("El número de genes incialmente es:", dim(dds_outlier)[1])
paste("El número de genes tras filtrar aquellos con un número de lecturas > 10 es:", dim(dds2_outlier)[1])
vsd_outlier <- vst(dds2_outlier, blind = TRUE)
ntd_outlier <- normTransform(dds2_outlier)
eSF_outlier <- estimateSizeFactors(dds2_outlier)
df_outlier <- bind_rows(
as_data_frame(log2(counts(eSF_outlier, normalized=TRUE)[, 1:2]+1)) %>%
mutate(transformation = "log2(x + 1)"),
as_data_frame(assay(vsd_outlier)[, 1:2]) %>% mutate(transformation = "vst"))
colnames(df_outlier)[1:2] <- c("x", "y")
lvls <- c("log2(x + 1)", "vst")
df_outlier$transformation <- factor(df$transformation, levels=lvls)
plot1 <- ggplot(df_outlier, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
par(mfrow = c(2,2))
norm_graph <- meanSdPlot(assay(ntd_outlier))
vsd_graph <- meanSdPlot(assay(vsd_outlier))
plot1_outlier
plot1_outlier <- ggplot(df_outlier, aes(x = x, y = y)) + geom_hex(bins = 80) +
coord_fixed() + facet_grid( . ~ transformation)
par(mfrow = c(2,2))
norm_graph <- meanSdPlot(assay(ntd_outlier))
norm_graph <- meanSdPlot(assay(ntd_outlier))
vsd_graph <- meanSdPlot(assay(vsd_outlier))
plot1_outlier
plotPCA(vsd_outlier, intgroup = "time")
plotPCA(vsd_outlier, intgroup = "patient")
plotPCA(vsd_outlier, intgroup = "group")
plotPCA(vsd_outlier, intgroup = "agent")
plotPCA(vsd_outlier, intgroup = "time")
sampleDists_outlier <- dist(t(assay(vsd_outlier)))
sampleDistMatrix_outlier <- as.matrix( sampleDists_outlier )
rownames(sampleDistMatrix_outlier) <- paste( vsd_outlier$patient, vsd_outlier$group, sep = " - " )
colnames(sampleDistMatrix_outlier) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix_outlier,
clustering_distance_rows = sampleDists_outlier,
clustering_distance_cols = sampleDists_outlier,
col = colors)
dds3_outlier <- DESeq(dds2_outlier, test = "Wald")
plotDispEsts(dds3_outlier)
plotMA(dds3_outlier)
res_DPN_outlier <- results(object = dds3_outlier,
contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
summary(res_DPN_outlier)
res_DPN_lfc1_outlier <- results(object = dds3_outlier,
contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_DPN_lfc1_outlier)
mat_DPN_outlier <- assay(vsd_outlier)[head(order(res_DPN_outlier$padj), 30), ]
mat_DPN <- mat_DPN_outlier - rowMeans(mat_DPN_outlier)
anno <- as.data.frame(colData(vsd_outlier)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat = mat_DPN_outlier, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2)
assays(dds)[["cooks"]]
par(mar=c(8,5,2,2))
boxplot(log10(assays(dds)[["cooks"]]), range=0, las=2)
View(dds)
maxCooks <- apply(assays(dds)[["cooks"]], 1, max)
assays(dds3)[["cooks"]]
boxplot(log10(assays(dds3)[["cooks"]]), range=0, las=2)
dds3
res_DPN$padj
res_DPN$pvalue
is.na(res_DPN$pvalue)
which(is.na(res_DPN$pvalue))
which(is.na(res_DPN$padj))
res_DPN@padj
res_DPN <- results(object = dds3,
contrast = c("group", "Control24h", "DPN24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
summary(res_DPN)
res_DPN$padj
summary(res_DPN_lfc1_outlier)
summary(res_DPN_outlier)
pheatmap(mat = mat_DPN_outlier, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
res_OHT_outlier <- results(object = dds3_outlier,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
pAdjustMethod = "BH"
)
summary(res_OHT_outlier)
res_OHT_lfc1_outlier <- results(object = dds3_outlier,
contrast = c("group", "Control24h", "OHT24h"),
alpha = 0.05,
lfcThreshold = 1,
pAdjustMethod = "BH"
)
summary(res_DPN_lfc1_outlier)
mat_OHT_outlier <- assay(vsd_outlier)[head(order(res_OHT_outlier$padj), 30), ]
mat_OHT <- mat_OHT_outlier - rowMeans(mat_OHT_outlier)
anno <- as.data.frame(colData(vsd_outlier)[ , c("patient", "agent", "time")])
ann_colors <- list(
patient = c("1" ="red", "2"= "yellow", "3" = "blue", "4" = "green"),
agent = c(Control ="gold1", DPN ="turquoise2", OHT = "purple"),
time = c("24h" = "red2", "48h" ="aquamarine")
)
pheatmap(mat = mat_OHT_outlier, annotation_col = anno, show_colnames = F, annotation_colors = ann_colors)
counts_data_2 <- counts_data[ ,-24]
dds_outlier <- DESeqDataSetFromMatrix(countData = counts_data_2,
colData = experiment_data_2,
design = ~ patient + group)
patient_outlier <- which(experiment_data$patient == 4)
agent_outlier <- which(experiment_data$agent == "Control")
time_outliert <- which(experiment_data$time == "24h")
pat_agent <- intersect(patient_outlier,agent_outlier)
pat_time <- intersect(patient_outlier,time_outliert)
index_outlier <- intersect(pat_agent,pat_time)
experiment_data_2 <- experiment_data[-index_outlier,]
counts_data_2 <- counts_data[ ,-24]
dds_outlier <- DESeqDataSetFromMatrix(countData = counts_data_2,
colData = experiment_data_2,
design = ~ patient + group)
dds_outlier
keep <- rowSums(counts(dds_outlier)) >= 10
dds2_outlier <- dds_outlier[keep, ]
paste("El número de genes incialmente es:", dim(dds_outlier)[1])
paste("El número de genes tras filtrar aquellos con un número de lecturas > 10 es:", dim(dds2_outlier)[1])
